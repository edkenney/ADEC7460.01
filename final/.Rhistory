features(reanalysis_sat_precip_amt_mm, unitroot_kpss)
# San Juan
## Plot
dengue_sj_train %>%
select(total_cases, reanalysis_sat_precip_amt_mm) %>%
mutate(precip_temp = reanalysis_sat_precip_amt_mm) %>%
mutate(precip_temp_lag_1 = lag(reanalysis_sat_precip_amt_mm)) %>%
mutate(precip_temp_lag_2 = lag(reanalysis_sat_precip_amt_mm, 2)) %>%
select(-reanalysis_sat_precip_amt_mm) %>%
pivot_longer(cols = c(precip_temp, precip_temp_lag_1, precip_temp_lag_2),
names_to = "type", values_to = "value") %>%
ggplot(aes(x = value, y = total_cases, color = type)) +
geom_point() +
labs(x = "Precipitation (K)", y = "Total Cases",
title = "Precipitation vs. Total Cases",
subtitle = "San Juan, Puerto Rico") +
guides(color = guide_legend(title = ""))
## Correlation
precip_sj_cor_base = cor(dengue_sj_train$total_cases,
dengue_sj_train$reanalysis_sat_precip_amt_mm,
use = "complete.obs")
precip_sj_cor_lag_1 = cor(dengue_sj_train$total_cases,
lag(dengue_sj_train$reanalysis_sat_precip_amt_mm),
use = "complete.obs")
precip_sj_cor_lag_2 = cor(dengue_sj_train$total_cases,
lag(dengue_sj_train$reanalysis_sat_precip_amt_mm, 2),
use = "complete.obs")
precip_sj_cor = c(precip_sj_cor_base, precip_sj_cor_lag_1, precip_sj_cor_lag_2)
cat("San Juan, Puerto Rico Precipitation Correlation\n")
print(matrix(data = precip_sj_cor, nrow = 1, ncol = 3,
dimnames = list("Correlation", c("Base", "Lag 1", "Lag 2"))))
## Stationarity
dengue_sj_train %>%
features(reanalysis_sat_precip_amt_mm, unitroot_kpss)
# Clean up values
rm(precip_iq_cor, precip_iq_cor_base, precip_iq_cor_lag_1, precip_iq_cor_lag_2,
precip_sj_cor, precip_sj_cor_base, precip_sj_cor_lag_1, precip_sj_cor_lag_2)
dengue_iq_train = dengue_iq_train %>%
mutate(temp_diff = difference(reanalysis_avg_temp_k),
dew_diff = difference(reanalysis_dew_point_temp_k),
precip_diff = difference(reanalysis_sat_precip_amt_mm)) %>%
mutate(temp_diff_lag1 = lag(temp_diff),
temp_diff_lag2 = lag(temp_diff, 2),
dew_diff_lag1 = lag(dew_diff),
dew_diff_lag2 = lag(dew_diff, 2),
precip_diff_lag1 = lag(precip_diff),
precip_diff_lag2 = lag(precip_diff, 2))
dengue_sj_train = dengue_sj_train %>%
mutate(temp_diff = difference(reanalysis_avg_temp_k),
dew_diff = difference(reanalysis_dew_point_temp_k),
precip_diff = difference(reanalysis_sat_precip_amt_mm)) %>%
mutate(temp_diff_lag1 = lag(temp_diff),
temp_diff_lag2 = lag(temp_diff, 2),
dew_diff_lag1 = lag(dew_diff),
dew_diff_lag2 = lag(dew_diff, 2),
precip_diff_lag1 = lag(precip_diff),
precip_diff_lag2 = lag(precip_diff, 2))
# Iquitos
## Model
dengue_iq_arima2 = head(dengue_iq_train, round(train_iq_obs*0.8)) %>%
model(
`ARIMA w/ Errors` = ARIMA(box_cox(total_cases, lambda) ~ temp_diff_lag1 +
temp_diff_lag2 + dew_diff_lag1 + dew_diff_lag2 +
precip_diff_lag1 + precip_diff_lag2 +
pdq(3,1,0) + PDQ(0,0,0) + fourier(K = 3))
)
## Report
report(dengue_iq_arima2)
## Plot Residuals
dengue_iq_arima2 %>%
gg_tsresiduals(lag_max = 52) +
labs(title = "ARIMA w/ Errors Model Residuals",
subtitle = "Iquitos, Peru")
## Ljung-Box Test
dengue_iq_arima2 %>%
augment() %>%
features(.innov, ljung_box, lag = 52)
## Accuracy of Model (focus on MAE since that is what the competition uses)
dengue_iq_arima2_forecast = dengue_iq_arima2 %>%
forecast(tail(dengue_iq_train, train_iq_obs - round(train_iq_obs*0.8)))
dengue_iq_arima2_forecast %>%
accuracy(tail(dengue_iq_train, train_iq_obs - round(train_iq_obs*0.8))) %>%
select(.model, MAE)
## Plot Forecast
dengue_iq_arima2_forecast %>%
autoplot(level = NULL, lwd = 1) +
labs(x = "Date", y = "Weekly Cases",
title = "ARIMA w/ Errors Forecasts (Iquitos, Peru)",
subtitle = "Test Set is Black Line") +
geom_line(data = tail(dengue_iq_train, train_iq_obs - round(train_iq_obs*0.8)),
aes(x = week, y = total_cases),
lwd = 1.25)
# San Juan
## Model
dengue_sj_arima2 = head(dengue_sj_train, round(train_sj_obs*0.8)) %>%
model(
`ARIMA w/ Errors` = ARIMA(box_cox(total_cases, lambda) ~ temp_diff_lag1 +
temp_diff_lag2 + dew_diff_lag1 + dew_diff_lag2 +
precip_diff_lag1 + precip_diff_lag2 +
pdq(3,1,0) + PDQ(0,0,0) + fourier(K = 3))
)
## Report
report(dengue_sj_arima2)
## Plot Residuals
dengue_sj_arima2 %>%
gg_tsresiduals(lag_max = 52) +
labs(title = "ARIMA w/ Errors Model Residuals",
subtitle = "San Juan, Puerto Rico")
## Ljung-Box Test
dengue_sj_arima2 %>%
augment() %>%
features(.innov, ljung_box, lag = 52)
## Accuracy of Model (focus on MAE since that is what the competition uses)
dengue_sj_arima2_forecast = dengue_sj_arima2 %>%
forecast(tail(dengue_sj_train, train_sj_obs - round(train_sj_obs*0.8)))
dengue_sj_arima2_forecast %>%
accuracy(tail(dengue_sj_train, train_sj_obs - round(train_sj_obs*0.8))) %>%
select(.model, MAE)
## Plot Forecast
dengue_sj_arima2_forecast %>%
autoplot(level = NULL, lwd = 1) +
labs(x = "Date", y = "Weekly Cases",
title = "ARIMA w/ Errors Forecasts (San Juan, Puerto Rico)",
subtitle = "Test Set is Black Line") +
geom_line(data = tail(dengue_sj_train, train_sj_obs - round(train_sj_obs*0.8)),
aes(x = week, y = total_cases),
lwd = 1.25)
# Iquitos
## Model
dengue_iq_nn = head(dengue_iq_train, round(train_iq_obs*0.8)) %>%
model(
NN = NNETAR(box_cox(total_cases, lambda) ~ temp_diff_lag1 + temp_diff_lag2 +
dew_diff_lag1 + dew_diff_lag2 +
precip_diff_lag1 + precip_diff_lag2)
)
## Report
report(dengue_iq_nn)
## Plot Residuals
dengue_iq_nn %>%
gg_tsresiduals(lag_max = 52) +
labs(title = "Neural Network Model Residuals",
subtitle = "Iquitos, Peru")
## Ljung-Box Test
dengue_iq_nn %>%
augment() %>%
features(.innov, ljung_box, lag = 52)
## Accuracy of Model (focus on MAE since that is what the competition uses)
dengue_iq_nn_forecast = dengue_iq_nn %>%
forecast(tail(dengue_iq_train, train_iq_obs - round(train_iq_obs*0.8)),
times = 25)
dengue_iq_nn_forecast %>%
accuracy(tail(dengue_iq_train, train_iq_obs - round(train_iq_obs*0.8))) %>%
select(.model, MAE)
## Plot Forecast
dengue_iq_nn_forecast %>%
autoplot(level = NULL, lwd = 1) +
labs(x = "Date", y = "Weekly Cases",
title = "Neural Network Forecasts (Iquitos, Peru)",
subtitle = "Test Set is Black Line") +
geom_line(data = tail(dengue_iq_train, train_iq_obs - round(train_iq_obs*0.8)),
aes(x = week, y = total_cases),
lwd = 1.25)
# San Juan
## Model
dengue_sj_nn = head(dengue_sj_train, round(train_sj_obs*0.8)) %>%
model(
NN = NNETAR(box_cox(total_cases, lambda) ~ temp_diff_lag1 + temp_diff_lag2 +
dew_diff_lag1 + dew_diff_lag2 +
precip_diff_lag1 + precip_diff_lag2)
)
## Report
report(dengue_sj_nn)
## Plot Residuals
dengue_sj_nn %>%
gg_tsresiduals(lag_max = 52) +
labs(title = "Neural Network Model Residuals",
subtitle = "San Juan, Puerto Rico")
## Ljung-Box Test
dengue_sj_nn %>%
augment() %>%
features(.innov, ljung_box, lag = 52)
## Accuracy of Model (focus on MAE since that is what the competition uses)
dengue_sj_nn_forecast = dengue_sj_nn %>%
forecast(tail(dengue_sj_train, train_sj_obs - round(train_sj_obs*0.8)),
scale = TRUE, times = 10)
dengue_sj_nn_forecast %>%
accuracy(tail(dengue_sj_train, train_sj_obs - round(train_sj_obs*0.8))) %>%
select(.model, MAE)
## Plot Forecast
dengue_sj_nn_forecast %>%
autoplot(level = NULL, lwd = 1) +
labs(x = "Date", y = "Weekly Cases",
title = "Neural Network Forecasts (San Juan, Puerto Rico)",
subtitle = "Test Set is Black Line") +
geom_line(data = tail(dengue_sj_train, train_sj_obs - round(train_sj_obs*0.8)),
aes(x = week, y = total_cases),
lwd = 1.25)
# Iquitos
## Model
dengue_iq_nn = head(dengue_iq_train, round(train_iq_obs*0.8)) %>%
model(
NN = NNETAR(box_cox(total_cases, lambda) ~ temp_diff_lag1 + temp_diff_lag2 +
dew_diff_lag1 + dew_diff_lag2 +
precip_diff_lag1 + precip_diff_lag2)
)
## Report
report(dengue_iq_nn)
## Plot Residuals
dengue_iq_nn %>%
gg_tsresiduals(lag_max = 52) +
labs(title = "Neural Network Model Residuals",
subtitle = "Iquitos, Peru")
## Ljung-Box Test
dengue_iq_nn %>%
augment() %>%
features(.innov, ljung_box, lag = 52)
## Accuracy of Model (focus on MAE since that is what the competition uses)
dengue_iq_nn_forecast = dengue_iq_nn %>%
forecast(tail(dengue_iq_train, train_iq_obs - round(train_iq_obs*0.8)),
times = 25)
dengue_iq_nn_forecast %>%
accuracy(tail(dengue_iq_train, train_iq_obs - round(train_iq_obs*0.8))) %>%
select(.model, MAE)
## Plot Forecast
dengue_iq_nn_forecast %>%
autoplot(level = NULL, lwd = 1) +
labs(x = "Date", y = "Weekly Cases",
title = "Neural Network Forecasts (Iquitos, Peru)",
subtitle = "Test Set is Black Line") +
geom_line(data = tail(dengue_iq_train, train_iq_obs - round(train_iq_obs*0.8)),
aes(x = week, y = total_cases),
lwd = 1.25)
# San Juan
## Model
dengue_sj_nn = head(dengue_sj_train, round(train_sj_obs*0.8)) %>%
model(
NN = NNETAR(box_cox(total_cases, lambda) ~ temp_diff_lag1 + temp_diff_lag2 +
dew_diff_lag1 + dew_diff_lag2 +
precip_diff_lag1 + precip_diff_lag2)
)
## Report
report(dengue_sj_nn)
## Plot Residuals
dengue_sj_nn %>%
gg_tsresiduals(lag_max = 52) +
labs(title = "Neural Network Model Residuals",
subtitle = "San Juan, Puerto Rico")
## Ljung-Box Test
dengue_sj_nn %>%
augment() %>%
features(.innov, ljung_box, lag = 52)
## Accuracy of Model (focus on MAE since that is what the competition uses)
dengue_sj_nn_forecast = dengue_sj_nn %>%
forecast(tail(dengue_sj_train, train_sj_obs - round(train_sj_obs*0.8)),
scale = TRUE, times = 10)
dengue_sj_nn_forecast %>%
accuracy(tail(dengue_sj_train, train_sj_obs - round(train_sj_obs*0.8))) %>%
select(.model, MAE)
## Plot Forecast
dengue_sj_nn_forecast %>%
autoplot(level = NULL, lwd = 1) +
labs(x = "Date", y = "Weekly Cases",
title = "Neural Network Forecasts (San Juan, Puerto Rico)",
subtitle = "Test Set is Black Line") +
geom_line(data = tail(dengue_sj_train, train_sj_obs - round(train_sj_obs*0.8)),
aes(x = week, y = total_cases),
lwd = 1.25)
# Create test set tsibble
dengue_test = left_join(dengue_features_test, dengue_labels_test,
by = c("city", "year", "weekofyear"))
dengue_test = dengue_test %>%
mutate(week = yearweek(base::as.Date(week_start_date))) %>%
as_tsibble(index = week, key = city)
# Split into cities
dengue_iq_test = dengue_test %>%
filter(city == "iq")
dengue_sj_test = dengue_test %>%
filter(city == "sj")
# Create the differenced values
dengue_iq_test = dengue_iq_test %>%
mutate(temp_diff = difference(reanalysis_avg_temp_k),
dew_diff = difference(reanalysis_dew_point_temp_k),
precip_diff = difference(reanalysis_sat_precip_amt_mm)) %>%
mutate(temp_diff_lag1 = lag(temp_diff),
temp_diff_lag2 = lag(temp_diff, 2),
dew_diff_lag1 = lag(dew_diff),
dew_diff_lag2 = lag(dew_diff, 2),
precip_diff_lag1 = lag(precip_diff),
precip_diff_lag2 = lag(precip_diff, 2))
dengue_sj_test = dengue_sj_test %>%
mutate(temp_diff = difference(reanalysis_avg_temp_k),
dew_diff = difference(reanalysis_dew_point_temp_k),
precip_diff = difference(reanalysis_sat_precip_amt_mm)) %>%
mutate(temp_diff_lag1 = lag(temp_diff),
temp_diff_lag2 = lag(temp_diff, 2),
dew_diff_lag1 = lag(dew_diff),
dew_diff_lag2 = lag(dew_diff, 2),
precip_diff_lag1 = lag(precip_diff),
precip_diff_lag2 = lag(precip_diff, 2))
# Fill gaps
dengue_iq_test = dengue_iq_test %>%
fill_gaps() %>%
mutate_all( ~ na.locf(.x, na.rm = FALSE))
dengue_sj_test = dengue_sj_test %>%
fill_gaps() %>%
mutate_all( ~ na.locf(.x, na.rm = FALSE))
# Iquitos
dengue_iq_model = dengue_iq_train %>%
model(
ARIMA = ARIMA(box_cox(total_cases, lambda) ~ pdq(1,1,3) + PDQ(0,0,0)),
`ARIMA w/ Errors` = ARIMA(box_cox(total_cases, lambda) ~ temp_diff_lag1 +
temp_diff_lag2 + dew_diff_lag1 + dew_diff_lag2 +
precip_diff_lag1 + precip_diff_lag2 +
pdq(3,1,0) + PDQ(0,0,0) + fourier(K = 3)),
`Neural Network` = NNETAR(box_cox(total_cases, lambda) ~ temp_diff_lag1 +
temp_diff_lag2 + dew_diff_lag1 + dew_diff_lag2 +
precip_diff_lag1 + precip_diff_lag2)
)
# San Juan
dengue_sj_model = dengue_sj_train %>%
model(
ARIMA = ARIMA(box_cox(total_cases, lambda) ~ pdq(1,1,3) + PDQ(0,0,0)),
`ARIMA w/ Errors` = ARIMA(box_cox(total_cases, lambda) ~ temp_diff_lag1 +
temp_diff_lag2 + dew_diff_lag1 + dew_diff_lag2 +
precip_diff_lag1 + precip_diff_lag2 +
pdq(3,1,0) + PDQ(0,0,0) + fourier(K = 3)),
`Neural Network` = NNETAR(box_cox(total_cases, lambda) ~ temp_diff_lag1 +
temp_diff_lag2 + dew_diff_lag1 + dew_diff_lag2 +
precip_diff_lag1 + precip_diff_lag2)
)
# Predict
dengue_iq_forecast = dengue_iq_model %>%
forecast(dengue_iq_test)
head(dengue_sj_train)
View(dengue_sj_test)
# Read in data
dengue_features_train = read.csv(file.path(path, "dengue_features_train.csv"))
dengue_features_test = read.csv(file.path(path, "dengue_features_test.csv"))
dengue_labels_train = read.csv(file.path(path, "dengue_labels_train.csv"))
dengue_labels_test = read.csv(file.path(path, "submission_format.csv"))
# Create Tsibble and combine training data
dengue_train = left_join(dengue_features_train, dengue_labels_train,
by = c("city", "year", "weekofyear"))
dengue_train = dengue_train %>%
mutate(week = yearweek(base::as.Date(week_start_date))) %>%
as_tsibble(index = week, key = city)
# Plot total cases
dengue_train %>%
autoplot(total_cases) +
labs(x = "Date", y = "Cases",
title = "Dengue Fever Cases",
subtitle = "April 1990 - June 2010") +
guides(color = guide_legend(title = "City"))
# Create training sets based on city
dengue_iq_train = dengue_train %>%
filter(city == "iq")
dengue_sj_train = dengue_train %>%
filter(city == "sj")
# Set Lambda for Box-Cox Transforms
lambda = 0.35
# Fill gaps and copy preceding value into it (2 missing values)
dengue_iq_train = dengue_iq_train %>%
fill_gaps() %>%
mutate_all( ~ na.locf(.x, na.rm = FALSE))
# Fill gaps and copy preceding value into it (three missing values)
dengue_sj_train = dengue_sj_train %>%
fill_gaps() %>%
mutate_all( ~ na.locf(.x, na.rm = FALSE))
# Grab lengths of training data for splits
train_iq_obs = dim(dengue_iq_train)[1]
train_sj_obs = dim(dengue_sj_train)[1]
# Grab 3 observations for differencing the test set later
extra_iq_train = tail(dengue_iq_train, 3)
extra_sj_train = tail(dengue_sj_train, 3)
knitr::opts_chunk$set(echo = TRUE)
# Required Libraries
require(fpp3)
require(knitr)
require(rstudioapi)
require(zoo)
path = dirname(documentPath())
# Read in data
dengue_features_train = read.csv(file.path(path, "dengue_features_train.csv"))
dengue_features_test = read.csv(file.path(path, "dengue_features_test.csv"))
dengue_labels_train = read.csv(file.path(path, "dengue_labels_train.csv"))
dengue_labels_test = read.csv(file.path(path, "submission_format.csv"))
# Create Tsibble and combine training data
dengue_train = left_join(dengue_features_train, dengue_labels_train,
by = c("city", "year", "weekofyear"))
dengue_train = dengue_train %>%
mutate(week = yearweek(base::as.Date(week_start_date))) %>%
as_tsibble(index = week, key = city)
# Plot total cases
dengue_train %>%
autoplot(total_cases) +
labs(x = "Date", y = "Cases",
title = "Dengue Fever Cases",
subtitle = "April 1990 - June 2010") +
guides(color = guide_legend(title = "City"))
# Create training sets based on city
dengue_iq_train = dengue_train %>%
filter(city == "iq")
dengue_sj_train = dengue_train %>%
filter(city == "sj")
# Set Lambda for Box-Cox Transforms
lambda = 0.35
# Fill gaps and copy preceding value into it (2 missing values)
dengue_iq_train = dengue_iq_train %>%
fill_gaps() %>%
mutate_all( ~ na.locf(.x, na.rm = FALSE))
# Fill gaps and copy preceding value into it (three missing values)
dengue_sj_train = dengue_sj_train %>%
fill_gaps() %>%
mutate_all( ~ na.locf(.x, na.rm = FALSE))
# Grab lengths of training data for splits
train_iq_obs = dim(dengue_iq_train)[1]
train_sj_obs = dim(dengue_sj_train)[1]
# Grab 3 observations for differencing the test set later
extra_iq_train = tail(dengue_iq_train, 3)
extra_sj_train = tail(dengue_sj_train, 3)
dengue_iq_train = dengue_iq_train %>%
mutate(temp_diff = difference(reanalysis_avg_temp_k),
dew_diff = difference(reanalysis_dew_point_temp_k),
precip_diff = difference(reanalysis_sat_precip_amt_mm)) %>%
mutate(temp_diff_lag1 = lag(temp_diff),
temp_diff_lag2 = lag(temp_diff, 2),
dew_diff_lag1 = lag(dew_diff),
dew_diff_lag2 = lag(dew_diff, 2),
precip_diff_lag1 = lag(precip_diff),
precip_diff_lag2 = lag(precip_diff, 2))
dengue_sj_train = dengue_sj_train %>%
mutate(temp_diff = difference(reanalysis_avg_temp_k),
dew_diff = difference(reanalysis_dew_point_temp_k),
precip_diff = difference(reanalysis_sat_precip_amt_mm)) %>%
mutate(temp_diff_lag1 = lag(temp_diff),
temp_diff_lag2 = lag(temp_diff, 2),
dew_diff_lag1 = lag(dew_diff),
dew_diff_lag2 = lag(dew_diff, 2),
precip_diff_lag1 = lag(precip_diff),
precip_diff_lag2 = lag(precip_diff, 2))
# Create test set tsibble
dengue_test = left_join(dengue_features_test, dengue_labels_test,
by = c("city", "year", "weekofyear"))
dengue_test = dengue_test %>%
mutate(week = yearweek(base::as.Date(week_start_date))) %>%
as_tsibble(index = week, key = city)
# Split into cities
dengue_iq_test = dengue_test %>%
filter(city == "iq")
dengue_sj_test = dengue_test %>%
filter(city == "sj")
# Create the differenced values
dengue_iq_test = bind_rows(extra_iq_train, dengue_iq_test)
dengue_iq_test = dengue_iq_test %>%
mutate(temp_diff = difference(reanalysis_avg_temp_k),
dew_diff = difference(reanalysis_dew_point_temp_k),
precip_diff = difference(reanalysis_sat_precip_amt_mm)) %>%
mutate(temp_diff_lag1 = lag(temp_diff),
temp_diff_lag2 = lag(temp_diff, 2),
dew_diff_lag1 = lag(dew_diff),
dew_diff_lag2 = lag(dew_diff, 2),
precip_diff_lag1 = lag(precip_diff),
precip_diff_lag2 = lag(precip_diff, 2))
dengue_sj_test = bind_rows(extra_sj_train, dengue_sj_test)
dengue_sj_test = dengue_sj_test %>%
mutate(temp_diff = difference(reanalysis_avg_temp_k),
dew_diff = difference(reanalysis_dew_point_temp_k),
precip_diff = difference(reanalysis_sat_precip_amt_mm)) %>%
mutate(temp_diff_lag1 = lag(temp_diff),
temp_diff_lag2 = lag(temp_diff, 2),
dew_diff_lag1 = lag(dew_diff),
dew_diff_lag2 = lag(dew_diff, 2),
precip_diff_lag1 = lag(precip_diff),
precip_diff_lag2 = lag(precip_diff, 2))
# Fill gaps
dengue_iq_test = dengue_iq_test %>%
fill_gaps() %>%
mutate_all( ~ na.locf(.x, na.rm = FALSE))
dengue_sj_test = dengue_sj_test %>%
fill_gaps() %>%
mutate_all( ~ na.locf(.x, na.rm = FALSE))
# Remove training observations
dengue_iq_test = tail(dengue_iq_test, -3)
dengue_sj_test = tail(dengue_sj_test, -3)
View(dengue_iq_test)
# Iquitos
dengue_iq_model = dengue_iq_train %>%
model(
ARIMA = ARIMA(box_cox(total_cases, lambda) ~ pdq(1,1,3) + PDQ(0,0,0)),
`ARIMA w/ Errors` = ARIMA(box_cox(total_cases, lambda) ~ temp_diff_lag1 +
temp_diff_lag2 + dew_diff_lag1 + dew_diff_lag2 +
precip_diff_lag1 + precip_diff_lag2 +
pdq(3,1,0) + PDQ(0,0,0) + fourier(K = 3)),
`Neural Network` = NNETAR(box_cox(total_cases, lambda) ~ temp_diff_lag1 +
temp_diff_lag2 + dew_diff_lag1 + dew_diff_lag2 +
precip_diff_lag1 + precip_diff_lag2)
)
# San Juan
dengue_sj_model = dengue_sj_train %>%
model(
ARIMA = ARIMA(box_cox(total_cases, lambda) ~ pdq(1,1,3) + PDQ(0,0,0)),
`ARIMA w/ Errors` = ARIMA(box_cox(total_cases, lambda) ~ temp_diff_lag1 +
temp_diff_lag2 + dew_diff_lag1 + dew_diff_lag2 +
precip_diff_lag1 + precip_diff_lag2 +
pdq(3,1,0) + PDQ(0,0,0) + fourier(K = 3)),
`Neural Network` = NNETAR(box_cox(total_cases, lambda) ~ temp_diff_lag1 +
temp_diff_lag2 + dew_diff_lag1 + dew_diff_lag2 +
precip_diff_lag1 + precip_diff_lag2)
)
# Predict
dengue_iq_forecast = dengue_iq_model %>%
forecast(dengue_iq_test)
